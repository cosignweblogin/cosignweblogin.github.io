diff --git a/filters/apache/mod_cosign.c b/filters/apache/mod_cosign.c
index 5ff2f06..f1c22b4 100755
--- a/filters/apache/mod_cosign.c
+++ b/filters/apache/mod_cosign.c
@@ -57,6 +57,7 @@ cosign_create_config( pool *p )
     cfg->posterror = NULL;
     cfg->validref = NULL;
     cfg->validpreg = NULL;
+    cfg->validredir = -1;
     cfg->referr = NULL;
     cfg->port = 0;
     cfg->protect = -1;
@@ -170,10 +171,14 @@ cosign_handler( request_rec *r )
 {
     cosign_host_config	*cfg;
     ap_regmatch_t	matches[ 1 ];
+    uri_components	uri;
+    unsigned short	port;
+    int			status;
     char		error[ 1024 ];
     const char		*qstr = NULL;
     const char		*pair, *key;
     const char		*dest = NULL;
+    const char		*hostname, *scheme;
     char		*cookie, *full_cookie;
     char		*rekey = NULL;
     int			rc, cv;
@@ -255,6 +260,56 @@ cosign_handler( request_rec *r )
 	goto validation_failed;
     }
 
+    /*
+     * if the current URL hostname doesn't match the hostname of the
+     * service URL, we'll end up setting the cookie for the wrong domain.
+     * we catch that here and consider it an error unless the admin has
+     * CosignAllowValidationRedirect set to On, in which case we extract
+     * the hostname from the service URL and use it to build a validation
+     * URL for the correct host.
+     */
+    if (( status = ap_parse_uri_components( r->pool, dest, &uri )) != HTTP_OK) {
+	cosign_log( APLOG_ERR, r->server,
+		    "mod_cosign: ap_parse_components %s failed", dest );
+	return( HTTP_INTERNAL_SERVER_ERROR );
+    }
+    if ( uri.scheme == NULL || uri.hostname == NULL ) {
+	cosign_log( APLOG_ERR, r->server,
+		    "mod_cosign: bad destination URL: %s", dest );
+	return( HTTP_BAD_REQUEST );
+    }
+    if ( uri.port == 0 ) {
+	uri.port = ap_default_port_for_scheme( uri.scheme );
+    }
+    hostname = ap_get_server_name( r );
+    port = ap_get_server_port( r );
+    if ( strcasecmp( hostname, uri.hostname ) != 0 || port != uri.port ) {
+	if ( cfg->validredir == 1 ) {
+	    if ( cfg->http == 1 ) {
+		scheme == "http";
+	    } else {
+		scheme = "https";
+	    }
+	    if ( port != uri.port ) {
+		dest = ap_psprintf( r->pool, "%s://%s:%d%s",
+			    scheme, uri.hostname, uri.port, r->unparsed_uri );
+	    } else {
+		dest = ap_psprintf( r->pool, "%s://%s%s",
+			    scheme, uri.hostname, r->unparsed_uri );
+	    }
+	    ap_table_set( r->headers_out, "Location", dest );
+
+	    return( HTTP_MOVED_PERMANENTLY );
+	} else {
+	    cosign_log( APLOG_ERR, r->server,
+			"mod_cosign: current hostname \"%s\" does not match "
+			"service URL hostname \"%s\", cannot set cookie for "
+			"correct host.", hostname, uri.hostname );
+
+	    return( HTTP_SERVICE_UNAVAILABLE );
+	}
+    }
+
     cv = cosign_cookie_valid( cfg, cookie, &rekey, &si,
 		r->connection->remote_ip, r->server );
     if ( rekey != NULL ) {
@@ -634,6 +689,19 @@ set_cosign_valid_reference( cmd_parms *params, void *mconfig, const char *arg )
 }
 
     static const char *
+set_cosign_allow_validation_redirect( cmd_parms *params,
+					void *mconfig, int flag )
+{
+    cosign_host_config		*cfg;
+
+    cfg = cosign_merge_cfg( params, mconfig );
+
+    cfg->validredir = flag;
+
+    return( NULL );
+}
+
+    static const char *
 set_cosign_validation_error_redirect( cmd_parms *params,
 					void *mconfig, const char *arg )
 {
@@ -1116,6 +1184,13 @@ static command_rec cosign_cmds[ ] =
         NULL, RSRC_CONF | ACCESS_CONF, TAKE1,
         "the regular expression matching valid redirect service URLs" },
 
+	{ "CosignAllowValidationRedirect",
+	set_cosign_allow_validation_redirect, NULL,
+	RSRC_CONF | ACCESS_CONF, FLAG,
+	"allow redirection to different validdation URL if "
+	"current vhost does not match service URL hostname AND "
+	"service URL matches CosignValidReferences pattern" },
+
         { "CosignValidationErrorRedirect",
 	set_cosign_validation_error_redirect,
         NULL, RSRC_CONF | ACCESS_CONF, TAKE1,
diff --git a/filters/apache2/mod_cosign.c b/filters/apache2/mod_cosign.c
index d90beeb..15589b4 100755
--- a/filters/apache2/mod_cosign.c
+++ b/filters/apache2/mod_cosign.c
@@ -62,6 +62,7 @@ cosign_create_config( apr_pool_t *p )
     cfg->posterror = NULL;
     cfg->validref = NULL;
     cfg->validpreg = NULL;
+    cfg->validredir = -1;
     cfg->referr = NULL;
     cfg->port = 0;
     cfg->protect = -1;
@@ -175,10 +176,14 @@ cosign_handler( request_rec *r )
 {
     cosign_host_config	*cfg;
     ap_regmatch_t	matches[ 1 ];
+    apr_uri_t		uri;
+    apr_port_t		port;
+    apr_status_t	status;
     char		error[ 1024 ];
     const char		*qstr = NULL;
     const char		*pair, *key;
     const char		*dest = NULL;
+    const char		*hostname, *scheme;
     char		*cookie, *full_cookie;
     char		*rekey = NULL;
     int			rc, cv;
@@ -256,6 +261,58 @@ cosign_handler( request_rec *r )
 	goto validation_failed;
     }
 
+    /*
+     * if the current URL hostname doesn't match the hostname of the
+     * service URL, we'll end up setting the cookie for the wrong domain.
+     * we catch that here and consider it an error unless the admin has
+     * CosignAllowValidationRedirect set to On, in which case we extract
+     * the hostname from the service URL and use it to build a validation
+     * URL for the correct host.
+     */
+    if (( status = apr_uri_parse( r->pool, dest, &uri )) != APR_SUCCESS ) {
+	apr_strerror( status, error, sizeof( error ));
+	cosign_log( APLOG_ERR, r->server,
+		    "mod_cosign: apr_uri_parse %s: %s", dest, error );
+	return( HTTP_INTERNAL_SERVER_ERROR );
+    }
+    if ( uri.scheme == NULL || uri.hostname == NULL ) {
+	cosign_log( APLOG_ERR, r->server,
+		    "mod_cosign: bad destination URL: %s", dest );
+	return( HTTP_BAD_REQUEST );
+    }
+    if ( uri.port == 0 ) {
+	uri.port = apr_uri_port_of_scheme( uri.scheme );
+    }
+    hostname = ap_get_server_name( r );
+    port = ap_get_server_port( r );
+    if ( strcasecmp( hostname, uri.hostname ) != 0 || port != uri.port ) {
+	if ( cfg->validredir == 1 ) {
+	    /* always redirect to https unless CosignHttpOnly is enabled. */
+	    if ( cfg->http == 1 ) {
+		scheme = "http";
+	    } else {
+		scheme = "https";
+	    }
+	    if ( port != uri.port ) {
+		dest = apr_psprintf( r->pool, "%s://%s:%d%s",
+			    scheme, uri.hostname, uri.port, r->unparsed_uri );
+	    } else {
+		dest = apr_psprintf( r->pool, "%s://%s%s",
+			    scheme, uri.hostname, r->unparsed_uri );
+	    }
+	    apr_table_set( r->headers_out, "Location", dest );
+
+	    return( HTTP_MOVED_PERMANENTLY );
+	} else {
+	    cosign_log( APLOG_ERR, r->server,
+			"mod_cosign: current hostname \"%s\" does not match "
+			"service URL hostname \"%s\", cannot set cookie for "
+			"correct domain.", hostname, uri.hostname );
+
+	    return( HTTP_SERVICE_UNAVAILABLE );
+	}
+    }
+
     cv = cosign_cookie_valid( cfg, cookie, &rekey, &si,
 		r->connection->remote_ip, r->server );
     if ( rekey != NULL ) {
@@ -639,6 +696,19 @@ set_cosign_valid_reference( cmd_parms *params, void *mconfig, const char *arg )
 }
 
     static const char *
+set_cosign_allow_validation_redirect( cmd_parms *params,
+					void *mconfig, int flag )
+{
+    cosign_host_config		*cfg;
+
+    cfg = cosign_merge_cfg( params, mconfig );
+
+    cfg->validredir = flag;
+
+    return( NULL );
+}
+
+    static const char *
 set_cosign_validation_error_redirect( cmd_parms *params,
 					void *mconfig, const char *arg )
 {
@@ -1115,6 +1185,12 @@ static command_rec cosign_cmds[ ] =
 	NULL, RSRC_CONF | ACCESS_CONF,
 	"the regular expression matching valid redirect service URLs" ),
 
+	AP_INIT_FLAG( "CosignAllowValidationRedirect",
+	set_cosign_allow_validation_redirect, NULL, RSRC_CONF | ACCESS_CONF,
+	"allow redirection to different validation URL if "
+	"current vhost does not match service URL hostname AND "
+	"service URL matches CosignValidReference pattern" ),
+
 	AP_INIT_TAKE1( "CosignValidationErrorRedirect",
 	set_cosign_validation_error_redirect, NULL, RSRC_CONF | ACCESS_CONF,
 	"where the location handler sends us in case of bad parameters" ),
diff --git a/filters/common/cosign.h b/filters/common/cosign.h
index 485bcb7..6c31365 100755
--- a/filters/common/cosign.h
+++ b/filters/common/cosign.h
@@ -19,6 +19,7 @@ typedef struct {
     char                *redirect;
     char                *posterror;
     char		*validref;
+    int			validredir;
     char		*referr;
 #ifndef LIGHTTPD
     ap_regex_t		*validpreg;
